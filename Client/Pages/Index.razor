@page "/"
@inject HttpClient Http


<PageTitle>Index</PageTitle>

<h3>Search YouTube Videos</h3>

<!-- Search input and button -->
<div>
    <input type="text" @bind="searchTerm" placeholder="Enter search term..." />
    <button @onclick="SearchVideos">Search</button>
</div>

<RadzenButton Text="Reset" Click="@Reset" Style="margin-top: 20px; margin-bottom: 5px;" />
<!-- Radzen Data Grid and its Title -->
<RadzenDataGrid Style="width: 1200px; height: 700px;"
                Data="@videos" TItem="Videos" Count="@videos.Count" PageSize="10"
                AllowPaging="true" AllowSorting="true" AllowColumnResize="true" 
                AllowColumnPicking="true" ShowPagingSummary="true" AllowFiltering="true" 
                IsLoading=@isLoading @ref="grid">
    <Columns>
        <RadzenDataGridColumn TItem="Videos" Property="Title" Title="Title" Width="300px" />
        <RadzenDataGridColumn TItem="Videos" Property="Channel" Title="Channel" Width="100px" />
        <RadzenDataGridColumn TItem="Videos" Property="Published" Title="Published" Width="100px" />
        <RadzenDataGridColumn TItem="Videos" Property="Duration" Title="Duration" Width="100px" />
        <RadzenDataGridColumn TItem="Videos" Property="Url" Title="URL" Width="224px">
            <Template Context="video">
                <a href="@video.Url" target="_blank">@video.Url</a>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>


<!-- Radzen Button to fill the Data Grid code -->
@code {
    private RadzenDataGrid<Videos>? grid;
    private string? searchTerm;
    private List<Videos> videos = new List<Videos>();
    private bool isLoading = false;
    private async Task SearchVideos()
    {
        isLoading = true;
        var response = await Http.GetAsync($"https://func-app-powershell001.azurewebsites.net/api/HttpTrigger3?searchterm={searchTerm}");
        if (response.IsSuccessStatusCode)
        {
            var jsonString = await response.Content.ReadAsStringAsync();
            var result = System.Text.Json.JsonSerializer.Deserialize<List<Videos>>(jsonString);
            videos = result ?? new List<Videos>(); // In case result is null, assign an empty list
        }
        else
        {
            videos = new List<Videos>(); // Clear the list or handle the error as needed
        }
        isLoading = false;
    }

    private async Task Reset()
    {
        isLoading = true;
        grid.Reset(true); 
        await grid.FirstPage(true);
        isLoading = false;
    }
}